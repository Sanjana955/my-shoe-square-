{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e707946c-6167-4c61-9a76-04da7d710366",
   "metadata": {},
   "source": [
    "Syntax : it refers to the set of rules that defines the structure of valid ststements and expressions in a programing language. \n",
    "Explanation : correct syntax is essential for writting code that the interpreter or complier can understand and execiute "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "66d2c133-07c9-470c-83d0-b06484fde9e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "# Correct syntax for a print statemnent \n",
    "print(\"Hello World\")     # The synatx is correct with parenthess and quotes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b0f10196-9ee3-43db-a1e2-9f3864c04ebe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raj\n"
     ]
    }
   ],
   "source": [
    "print(\"Raj\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38e96115-a3b2-43bb-a489-e42381b5bb86",
   "metadata": {},
   "source": [
    "Literals : A literals is a fixed value that is directly written into the code and represents a specific data type.\n",
    "Explanation : literals are used to specify values in the code, such as numbers, strings,or boolean values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d37b6118-2ef4-4e56-adc5-1a178444ad80",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Integer Literals\n",
    "age = 30 #30 is the integer literals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10e0ebee-b271-4137-91af-3f4966e6e8ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# String Literals\n",
    "greeting = \"Hello World\")   # \"Hello World\" is a string Literals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8dadbeb-f23e-4c13-a8e1-3941bb8bd64e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Boolean Literals\n",
    "is_active = True # True is a Boolean Literals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "046a16ac-6fdb-4fef-9328-0c1180de6ec3",
   "metadata": {},
   "source": [
    "Operators in Python "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9640bf64-bf6c-4155-8a63-f1a1ebe79ab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Operators : An Operators is a symbol taht performs an operation on one or more operands(values or variables) in an expression.\n",
    "Explanation : Operators are used to perform various computations like addition,subtrction,comparision and logical operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb5832c8-47c5-4a24-ac0a-29fadfcc4b73",
   "metadata": {},
   "source": [
    "1.Arithmetic Operators\n",
    "2.Relational Operators\n",
    "3.Logical Opeartors\n",
    "4.Bitwise Operators\n",
    "5.Membership Operators\n",
    "\n",
    "Operators in python are symbols that perform operations on operands such as numbers or variables, to produce a result "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "977c3219-f534-4999-9d0d-65027a311c5c",
   "metadata": {},
   "source": [
    "Arithmetic Operator: An Arithmetic Operator is a symbol that perform basic mathematical operations such as addition, subtraction, multiplication and division and numerical values.\n",
    "Explanation: These operators are used to acrry out arithmetic computations between operands in python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "41927580-6354-45bb-bb78-248ae121f257",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5 + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a61a8261-f483-47e0-a15d-c930bd4bc7d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6e0213b4-5bc7-48c4-97ca-890945c48673",
   "metadata": {},
   "outputs": [],
   "source": [
    "b = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fd9e0944-424e-41a1-b741-31e79733b9d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + b "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a1eef71a-df16-4929-bbd9-78c87907df13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a - b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f0078451-e777-4f84-9c7e-bc2b1f03ed29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a * b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d87038bd-3475-4e78-8f9c-c3132a7cd68c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a / b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b81b6d32-dc48-46fa-bb11-cd232d166e69",
   "metadata": {},
   "outputs": [],
   "source": [
    "Floor Division : The floor division operator divides the firstnumber by the second and returns the largest integer less than or equalto the result\n",
    "Example :\n",
    "    result =15 // 4 # result is 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6ac71b38-70a8-4741-bc4e-e22307528da5",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 16 / 3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f318890d-5cc3-4557-9709-afe6784ba0a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.333333333333333"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "792ce722-7097-41a0-b293-643aee95cb61",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 16 // 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ef37da84-f635-47d9-a684-cdc93e222f9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b62dfad1-6417-4fc4-86a6-fb6dfc141570",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "12 // 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "038db40e-52f7-4784-b63f-6496231ad3c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5 // 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e00e8bf9-d1e2-467f-a360-4709440dbac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Modulus operator(%): The modules Operator returns the remainder of the division of the first number by the second.\n",
    "Example: \n",
    "result = 10 % 3   # result is 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "34c5cd3b-1b0d-4f54-9867-dfe9487a4223",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 10 % 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a5a2a367-ab29-4fc4-9ddb-f9e215d80bff",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.3333333333333335"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "57df2d71-30e7-4401-a37e-d6ca730306e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d88584d3-3d16-48fb-b752-93a73c9c7ccb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "16/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c2c54e4f-6a83-4577-b9f9-66033fe0cab6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "16 % 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af10af0a-9f14-47f9-b08a-8d54a297a11b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Exponentitation :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3de2c87f-0354-4bcc-81f9-f5fb223e15b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 2 **3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "23725a1e-6c6e-4828-8013-9950a7f0876a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2*2*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2efe351c-3c64-43df-a9f9-05092625f887",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1ffd5f0c-1e51-4815-95c2-f0ef4e243d98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "db5f2b46-5152-416a-a18b-a826c5bca9ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1024"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "4**5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3b40a789-69c4-4996-b7ce-2e1c00ca36ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "128"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2*2*2*2*2*2*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9240d869-73b0-43f1-95f4-a45263e3633a",
   "metadata": {},
   "outputs": [],
   "source": [
    "combining Arithimetic operator: Arithmetic operator can be combined in expression to perform multiple operations. python follows the oredr of operations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "309658b2-9ff8-47aa-a86e-aa7daaf5963b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = 5 + 3 * 2 - 8 / 4\n",
    "result \n",
    "() > / > * > + > - \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3d778c6e-fd17-42bf-873e-14b9b72fbe0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "328c3e9a-f197-4d86-91bb-a3c07a115ea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "86.6"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(85+90+78+92+88)/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6075952d-6350-4d73-8001-9afb62c93a4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exam scores\n",
    "scores = [85, 90, 78,92,88]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5adac3a7-250e-4696-beb1-dee53250feab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate total score\n",
    "total_scores = sum(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8f14840c-1bd6-4444-81d6-2523c63c0afe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "433"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3b23ffe0-7b3e-4d90-9ac8-7824281847ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "86.6"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "433/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2f0d7809-36d0-48cd-bad7-7e67a879eaa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4f70fd9f-e70d-4773-b8b3-11553c9eb0b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "500"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1200-350-150-200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "74211740-5997-4595-9ef6-52b4c05a6296",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " 100-20-75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c388f232-db56-46f6-a88c-d5ec8cda60b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "75-20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "30cbfb6b-cb01-4212-84e8-d45c2dd506c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.55"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "55/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "51981d03-b259-45c9-a829-fcbdc2403fa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "30%25"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
